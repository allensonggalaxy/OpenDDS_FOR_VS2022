/* Generated by ..\..\bin\opendds_idl version 3.20.0 (ACE version 6.2a_p23) running on input file Federator.idl */
#include "DcpsInfo_pch.h"
#include "FederatorTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DdsDcpsCoreTypeSupportImpl.h"
#include "dds/DdsDcpsGuidTypeSupportImpl.h"
#include "dds/DdsDcpsInfoUtilsTypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin STRUCT: Property_t */


/* End STRUCT: Property_t */


/* Begin TYPEDEF: PropertySeq */


/* End TYPEDEF: PropertySeq */


/* Begin STRUCT: BinaryProperty_t */


/* End STRUCT: BinaryProperty_t */


/* Begin TYPEDEF: BinaryPropertySeq */


/* End TYPEDEF: BinaryPropertySeq */


/* Begin STRUCT: PropertyQosPolicy */


/* End STRUCT: PropertyQosPolicy */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin TYPEDEF: DataRepresentationId_t */


/* End TYPEDEF: DataRepresentationId_t */


/* Begin CONST: XCDR_DATA_REPRESENTATION */


/* End CONST: XCDR_DATA_REPRESENTATION */


/* Begin CONST: XML_DATA_REPRESENTATION */


/* End CONST: XML_DATA_REPRESENTATION */


/* Begin CONST: XCDR2_DATA_REPRESENTATION */


/* End CONST: XCDR2_DATA_REPRESENTATION */


/* Begin TYPEDEF: DataRepresentationIdSeq */


/* End TYPEDEF: DataRepresentationIdSeq */


/* Begin STRUCT: DataRepresentationQosPolicy */


/* End STRUCT: DataRepresentationQosPolicy */


/* Begin CONST: DATA_REPRESENTATION_QOS_POLICY_ID */


/* End CONST: DATA_REPRESENTATION_QOS_POLICY_ID */


/* Begin CONST: DATA_REPRESENTATION_QOS_POLICY_NAME */


/* End CONST: DATA_REPRESENTATION_QOS_POLICY_NAME */


/* Begin TYPEDEF: TypeConsistencyEnforcementQosPolicyKind_t */


/* End TYPEDEF: TypeConsistencyEnforcementQosPolicyKind_t */


/* Begin CONST: DISALLOW_TYPE_COERCION */


/* End CONST: DISALLOW_TYPE_COERCION */


/* Begin CONST: ALLOW_TYPE_COERCION */


/* End CONST: ALLOW_TYPE_COERCION */


/* Begin STRUCT: TypeConsistencyEnforcementQosPolicy */


/* End STRUCT: TypeConsistencyEnforcementQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin TYPEDEF: OctetArray16 */


/* End TYPEDEF: OctetArray16 */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin CONST: UNALIGNED_CDR_DATA_REPRESENTATION */


/* End CONST: UNALIGNED_CDR_DATA_REPRESENTATION */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: GuidVendorId_t */


/* End TYPEDEF: GuidVendorId_t */


/* Begin TYPEDEF: GuidPrefix_t */


/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityKey_t */


/* End TYPEDEF: EntityKey_t */


/* Begin STRUCT: EntityId_t */


/* End STRUCT: EntityId_t */


/* Begin CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* End CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* Begin CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* End CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_TOPIC */


/* End CONST: ENTITYKIND_BUILTIN_TOPIC */


/* Begin CONST: ENTITYKIND_USER_UNKNOWN */


/* End CONST: ENTITYKIND_USER_UNKNOWN */


/* Begin CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_NO_KEY */


/* End CONST: ENTITYKIND_USER_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* End CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* Begin CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* End CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* Begin CONST: ENTITYKIND_OPENDDS_TOPIC */


/* End CONST: ENTITYKIND_OPENDDS_TOPIC */


/* Begin CONST: ENTITYKIND_OPENDDS_USER */


/* End CONST: ENTITYKIND_OPENDDS_USER */


/* Begin CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* End CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* Begin STRUCT: GUID_t */


/* End STRUCT: GUID_t */


/* Begin TYPEDEF: GUIDSeq */


/* End TYPEDEF: GUIDSeq */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: RepoId */


/* End TYPEDEF: RepoId */


/* Begin STRUCT: MonotonicTime_t */


/* End STRUCT: MonotonicTime_t */


/* Begin TYPEDEF: TransportBLOB */


/* End TYPEDEF: TransportBLOB */


/* Begin STRUCT: TransportLocator */


/* End STRUCT: TransportLocator */


/* Begin TYPEDEF: TransportLocatorSeq */


/* End TYPEDEF: TransportLocatorSeq */


/* Begin STRUCT: IncompatibleQosStatus */


/* End STRUCT: IncompatibleQosStatus */


/* Begin STRUCT: AddDomainStatus */


/* End STRUCT: AddDomainStatus */


/* Begin ENUM: TopicStatus */


/* End ENUM: TopicStatus */


/* Begin STRUCT: WriterAssociation */


/* End STRUCT: WriterAssociation */


/* Begin STRUCT: ReaderAssociation */


/* End STRUCT: ReaderAssociation */


/* Begin TYPEDEF: WriterIdSeq */


/* End TYPEDEF: WriterIdSeq */


/* Begin TYPEDEF: ReaderIdSeq */


/* End TYPEDEF: ReaderIdSeq */


/* Begin TYPEDEF: String256 */


/* End TYPEDEF: String256 */


/* Begin STRUCT: ContentFilterProperty_t */


/* End STRUCT: ContentFilterProperty_t */


/* Begin STRUCT: ReaderProxy_t */


/* End STRUCT: ReaderProxy_t */


/* Begin STRUCT: DiscoveredReaderData */


/* End STRUCT: DiscoveredReaderData */


/* Begin STRUCT: WriterProxy_t */


/* End STRUCT: WriterProxy_t */


/* Begin STRUCT: DiscoveredWriterData */


/* End STRUCT: DiscoveredWriterData */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Condition */


/* End INTERFACE-FWD: Condition */


/* Begin TYPEDEF: ConditionSeq */


/* End TYPEDEF: ConditionSeq */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: DomainId_t */


/* End TYPEDEF: DomainId_t */


/* Begin TYPEDEF: ReturnCode_t */


/* End TYPEDEF: ReturnCode_t */


/* Begin CONST: HANDLE_NIL */


/* End CONST: HANDLE_NIL */


/* Begin CONST: LENGTH_UNLIMITED */


/* End CONST: LENGTH_UNLIMITED */


/* Begin CONST: RETCODE_OK */


/* End CONST: RETCODE_OK */


/* Begin CONST: RETCODE_ERROR */


/* End CONST: RETCODE_ERROR */


/* Begin CONST: RETCODE_UNSUPPORTED */


/* End CONST: RETCODE_UNSUPPORTED */


/* Begin CONST: RETCODE_BAD_PARAMETER */


/* End CONST: RETCODE_BAD_PARAMETER */


/* Begin CONST: RETCODE_PRECONDITION_NOT_MET */


/* End CONST: RETCODE_PRECONDITION_NOT_MET */


/* Begin CONST: RETCODE_OUT_OF_RESOURCES */


/* End CONST: RETCODE_OUT_OF_RESOURCES */


/* Begin CONST: RETCODE_NOT_ENABLED */


/* End CONST: RETCODE_NOT_ENABLED */


/* Begin CONST: RETCODE_IMMUTABLE_POLICY */


/* End CONST: RETCODE_IMMUTABLE_POLICY */


/* Begin CONST: RETCODE_INCONSISTENT_POLICY */


/* End CONST: RETCODE_INCONSISTENT_POLICY */


/* Begin CONST: RETCODE_ALREADY_DELETED */


/* End CONST: RETCODE_ALREADY_DELETED */


/* Begin CONST: RETCODE_TIMEOUT */


/* End CONST: RETCODE_TIMEOUT */


/* Begin CONST: RETCODE_NO_DATA */


/* End CONST: RETCODE_NO_DATA */


/* Begin CONST: RETCODE_ILLEGAL_OPERATION */


/* End CONST: RETCODE_ILLEGAL_OPERATION */


/* Begin TYPEDEF: StatusKind */


/* End TYPEDEF: StatusKind */


/* Begin TYPEDEF: StatusMask */


/* End TYPEDEF: StatusMask */


/* Begin CONST: INCONSISTENT_TOPIC_STATUS */


/* End CONST: INCONSISTENT_TOPIC_STATUS */


/* Begin CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* End CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* Begin CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* End CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* Begin CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: SAMPLE_LOST_STATUS */


/* End CONST: SAMPLE_LOST_STATUS */


/* Begin CONST: SAMPLE_REJECTED_STATUS */


/* End CONST: SAMPLE_REJECTED_STATUS */


/* Begin CONST: DATA_ON_READERS_STATUS */


/* End CONST: DATA_ON_READERS_STATUS */


/* Begin CONST: DATA_AVAILABLE_STATUS */


/* End CONST: DATA_AVAILABLE_STATUS */


/* Begin CONST: LIVELINESS_LOST_STATUS */


/* End CONST: LIVELINESS_LOST_STATUS */


/* Begin CONST: LIVELINESS_CHANGED_STATUS */


/* End CONST: LIVELINESS_CHANGED_STATUS */


/* Begin CONST: PUBLICATION_MATCHED_STATUS */


/* End CONST: PUBLICATION_MATCHED_STATUS */


/* Begin CONST: SUBSCRIPTION_MATCHED_STATUS */


/* End CONST: SUBSCRIPTION_MATCHED_STATUS */


/* Begin STRUCT: InconsistentTopicStatus */


/* End STRUCT: InconsistentTopicStatus */


/* Begin STRUCT: SampleLostStatus */


/* End STRUCT: SampleLostStatus */


/* Begin ENUM: SampleRejectedStatusKind */


/* End ENUM: SampleRejectedStatusKind */


/* Begin STRUCT: SampleRejectedStatus */


/* End STRUCT: SampleRejectedStatus */


/* Begin STRUCT: LivelinessLostStatus */


/* End STRUCT: LivelinessLostStatus */


/* Begin STRUCT: LivelinessChangedStatus */


/* End STRUCT: LivelinessChangedStatus */


/* Begin STRUCT: OfferedDeadlineMissedStatus */


/* End STRUCT: OfferedDeadlineMissedStatus */


/* Begin STRUCT: RequestedDeadlineMissedStatus */


/* End STRUCT: RequestedDeadlineMissedStatus */


/* Begin STRUCT: OfferedIncompatibleQosStatus */


/* End STRUCT: OfferedIncompatibleQosStatus */


/* Begin STRUCT: RequestedIncompatibleQosStatus */


/* End STRUCT: RequestedIncompatibleQosStatus */


/* Begin STRUCT: PublicationMatchedStatus */


/* End STRUCT: PublicationMatchedStatus */


/* Begin STRUCT: SubscriptionMatchedStatus */


/* End STRUCT: SubscriptionMatchedStatus */


/* Begin INTERFACE-FWD: Listener */


/* End INTERFACE-FWD: Listener */


/* Begin INTERFACE-FWD: Entity */


/* End INTERFACE-FWD: Entity */


/* Begin INTERFACE: Listener */


/* End INTERFACE: Listener */


/* Begin INTERFACE: Condition */


/* End INTERFACE: Condition */


/* Begin INTERFACE: WaitSetInterf */


/* End INTERFACE: WaitSetInterf */


/* Begin INTERFACE: GuardConditionInterf */


/* End INTERFACE: GuardConditionInterf */


/* Begin INTERFACE: StatusCondition */


/* End INTERFACE: StatusCondition */


/* Begin CONST: USERDATA_QOS_POLICY_NAME */


/* End CONST: USERDATA_QOS_POLICY_NAME */


/* Begin CONST: DURABILITY_QOS_POLICY_NAME */


/* End CONST: DURABILITY_QOS_POLICY_NAME */


/* Begin CONST: PRESENTATION_QOS_POLICY_NAME */


/* End CONST: PRESENTATION_QOS_POLICY_NAME */


/* Begin CONST: DEADLINE_QOS_POLICY_NAME */


/* End CONST: DEADLINE_QOS_POLICY_NAME */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* End CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIP_QOS_POLICY_NAME */


/* End CONST: OWNERSHIP_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* Begin CONST: LIVELINESS_QOS_POLICY_NAME */


/* End CONST: LIVELINESS_QOS_POLICY_NAME */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* Begin CONST: PARTITION_QOS_POLICY_NAME */


/* End CONST: PARTITION_QOS_POLICY_NAME */


/* Begin CONST: RELIABILITY_QOS_POLICY_NAME */


/* End CONST: RELIABILITY_QOS_POLICY_NAME */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* End CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* Begin CONST: HISTORY_QOS_POLICY_NAME */


/* End CONST: HISTORY_QOS_POLICY_NAME */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* End CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* End CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: TOPICDATA_QOS_POLICY_NAME */


/* End CONST: TOPICDATA_QOS_POLICY_NAME */


/* Begin CONST: GROUPDATA_QOS_POLICY_NAME */


/* End CONST: GROUPDATA_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* Begin CONST: LIFESPAN_QOS_POLICY_NAME */


/* End CONST: LIFESPAN_QOS_POLICY_NAME */


/* Begin CONST: DURABILITYSERVICE_POLICY_NAME */


/* End CONST: DURABILITYSERVICE_POLICY_NAME */


/* Begin CONST: INVALID_QOS_POLICY_ID */


/* End CONST: INVALID_QOS_POLICY_ID */


/* Begin CONST: USERDATA_QOS_POLICY_ID */


/* End CONST: USERDATA_QOS_POLICY_ID */


/* Begin CONST: DURABILITY_QOS_POLICY_ID */


/* End CONST: DURABILITY_QOS_POLICY_ID */


/* Begin CONST: PRESENTATION_QOS_POLICY_ID */


/* End CONST: PRESENTATION_QOS_POLICY_ID */


/* Begin CONST: DEADLINE_QOS_POLICY_ID */


/* End CONST: DEADLINE_QOS_POLICY_ID */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* End CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIP_QOS_POLICY_ID */


/* End CONST: OWNERSHIP_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* Begin CONST: LIVELINESS_QOS_POLICY_ID */


/* End CONST: LIVELINESS_QOS_POLICY_ID */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* Begin CONST: PARTITION_QOS_POLICY_ID */


/* End CONST: PARTITION_QOS_POLICY_ID */


/* Begin CONST: RELIABILITY_QOS_POLICY_ID */


/* End CONST: RELIABILITY_QOS_POLICY_ID */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* End CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* Begin CONST: HISTORY_QOS_POLICY_ID */


/* End CONST: HISTORY_QOS_POLICY_ID */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* End CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* End CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: TOPICDATA_QOS_POLICY_ID */


/* End CONST: TOPICDATA_QOS_POLICY_ID */


/* Begin CONST: GROUPDATA_QOS_POLICY_ID */


/* End CONST: GROUPDATA_QOS_POLICY_ID */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* Begin CONST: LIFESPAN_QOS_POLICY_ID */


/* End CONST: LIFESPAN_QOS_POLICY_ID */


/* Begin CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* End CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* Begin INTERFACE: Entity */


/* End INTERFACE: Entity */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* Begin CONST: MAX_USER_DOMAINID */


/* End CONST: MAX_USER_DOMAINID */


/* Begin CONST: DOMAIN_UNKNOWN */


/* End CONST: DOMAIN_UNKNOWN */


/* Begin MODULE: DCPS */



/* Begin CONST: ALL_STATUS_MASK */


/* End CONST: ALL_STATUS_MASK */


/* Begin CONST: NO_STATUS_MASK */


/* End CONST: NO_STATUS_MASK */


/* Begin CONST: DEFAULT_STATUS_MASK */


/* End CONST: DEFAULT_STATUS_MASK */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Topic */


/* End INTERFACE-FWD: Topic */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataWriter */


/* End INTERFACE-FWD: DataWriter */


/* Begin INTERFACE-FWD: Publisher */


/* End INTERFACE-FWD: Publisher */


/* Begin INTERFACE: DataWriterListener */


/* End INTERFACE: DataWriterListener */


/* Begin INTERFACE: PublisherListener */


/* End INTERFACE: PublisherListener */


/* Begin INTERFACE: DataWriter */


/* End INTERFACE: DataWriter */


/* Begin INTERFACE: Publisher */


/* End INTERFACE: Publisher */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin STRUCT: PublicationLostStatus */


/* End STRUCT: PublicationLostStatus */


/* Begin TYPEDEF: PublicationDisconnectedStatus */


/* End TYPEDEF: PublicationDisconnectedStatus */


/* Begin TYPEDEF: PublicationReconnectedStatus */


/* End TYPEDEF: PublicationReconnectedStatus */


/* Begin TYPEDEF: DisassociationStatus */


/* End TYPEDEF: DisassociationStatus */


/* Begin INTERFACE: DataWriterListener */


/* End INTERFACE: DataWriterListener */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: DataReader */


/* End INTERFACE-FWD: DataReader */


/* Begin TYPEDEF: DataReaderSeq */


/* End TYPEDEF: DataReaderSeq */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: TopicDescription */


/* End INTERFACE-FWD: TopicDescription */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataReader */


/* End INTERFACE-FWD: DataReader */


/* Begin INTERFACE-FWD: Subscriber */


/* End INTERFACE-FWD: Subscriber */


/* Begin INTERFACE: DataReaderListener */


/* End INTERFACE: DataReaderListener */


/* Begin INTERFACE: SubscriberListener */


/* End INTERFACE: SubscriberListener */


/* Begin INTERFACE: ReadCondition */


/* End INTERFACE: ReadCondition */


/* Begin INTERFACE: QueryCondition */


/* End INTERFACE: QueryCondition */


/* Begin INTERFACE: DataReader */


/* End INTERFACE: DataReader */


/* Begin INTERFACE: Subscriber */


/* End INTERFACE: Subscriber */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DataWriterRemote */


/* End INTERFACE: DataWriterRemote */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DataReaderRemote */


/* End INTERFACE: DataReaderRemote */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DCPSInfo */


/* End INTERFACE: DCPSInfo */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: Federator */



/* Begin TYPEDEF: RepoKey */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_RepoKey_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211));
  }
  return ti;
}

static const XTypes::TypeMap& get_minimal_type_map();
template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_RepoKey_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: RepoKey */


/* Begin TYPEDEF: FederationDomain */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_FederationDomain_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(144, 121, 145, 14, 41, 12, 191, 173, 113, 126, 227, 243, 169, 231));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_FederationDomain_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: FederationDomain */


/* Begin TYPEDEF: FederationId */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_FederationId_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_FederationId_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: FederationId */


/* Begin ENUM: UpdateType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_UpdateType_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(85, 82, 253, 89, 77, 255, 166, 87, 160, 151, 85, 214, 7, 68));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_UpdateType_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::OpenDDS::Federator::UpdateType& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListEnumHelper::Pair pairs[] = {{"CreateEntity",0},{"DestroyEntity",1},{"UpdateQosValue1",2},{"UpdateQosValue2",3},{"UpdateFilterExpressionParams",4},{0,0}};
  ListEnumHelper helper(pairs);
  return value_reader.read_enum(value, helper);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::OpenDDS::Federator::UpdateType& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  switch (value) {
  case OpenDDS::Federator::CreateEntity:
    value_writer.write_enum("CreateEntity", OpenDDS::Federator::CreateEntity);
    break;
  case OpenDDS::Federator::DestroyEntity:
    value_writer.write_enum("DestroyEntity", OpenDDS::Federator::DestroyEntity);
    break;
  case OpenDDS::Federator::UpdateQosValue1:
    value_writer.write_enum("UpdateQosValue1", OpenDDS::Federator::UpdateQosValue1);
    break;
  case OpenDDS::Federator::UpdateQosValue2:
    value_writer.write_enum("UpdateQosValue2", OpenDDS::Federator::UpdateQosValue2);
    break;
  case OpenDDS::Federator::UpdateFilterExpressionParams:
    value_writer.write_enum("UpdateFilterExpressionParams", OpenDDS::Federator::UpdateFilterExpressionParams);
    break;
  }
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const  ::OpenDDS::Federator::UpdateType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
    if (CORBA::ULong(enumval) >= 5) {
      ACE_DEBUG((LM_DEBUG, ACE_TEXT("(%P|%t) Invalid enumerated value for  ::OpenDDS::Federator::UpdateType (%u)\n"), enumval));
      return false;
    }
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm,  ::OpenDDS::Federator::UpdateType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    if (temp >= 5) {
      strm.set_construction_status(Serializer::ElementConstructionFailure);
      return false;
    }
    enumval = static_cast< ::OpenDDS::Federator::UpdateType>(temp);
    return true;
  }
  return false;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_OpenDDS_Federator_UpdateType_names[] = {
  "CreateEntity",
  "DestroyEntity",
  "UpdateQosValue1",
  "UpdateQosValue2",
  "UpdateFilterExpressionParams"
};
const size_t gen_OpenDDS_Federator_UpdateType_names_size = 5;
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End ENUM: UpdateType */


/* Begin CONST: NIL_REPOSITORY */


/* End CONST: NIL_REPOSITORY */


/* Begin CONST: DEFAULT_FEDERATIONDOMAIN */


/* End CONST: DEFAULT_FEDERATIONDOMAIN */


/* Begin CONST: ANY_FEDERATIONDOMAIN */


/* End CONST: ANY_FEDERATIONDOMAIN */


/* Begin STRUCT: OwnerUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_OwnerUpdate_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(197, 166, 144, 159, 126, 194, 77, 170, 105, 72, 204, 163, 95, 225));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_OwnerUpdate_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::OpenDDS::Federator::OwnerUpdate& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"sender",0},{"owner",1},{"participant",2},{"domain",3},{"action",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.sender)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.owner)) return false;
      break;
    }
    case 2: {
      if (!vread(value_reader, value.participant)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_int32(value.domain)) return false;
      break;
    }
    case 4: {
      if (!vread(value_reader, value.action)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::OpenDDS::Federator::OwnerUpdate& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member("sender");
  value_writer.write_int32(value.sender);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("owner");
  value_writer.write_int32(value.owner);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("participant");
  vwrite(value_writer, value.participant);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("domain");
  value_writer.write_int32(value.domain);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("action");
  vwrite(value_writer, value.action);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::OpenDDS::Federator::OwnerUpdate& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.sender = 0;
  stru.owner = 0;
  set_default(stru.participant);
  stru.domain = 0;
  stru.action =  ::OpenDDS::Federator::CreateEntity;
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::OpenDDS::Federator::OwnerUpdate& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.sender);
  primitive_serialized_size(encoding, size, stru.owner);
  serialized_size(encoding, size, stru.participant);
  primitive_serialized_size(encoding, size, stru.domain);
  primitive_serialized_size_ulong(encoding, size);
}

bool operator<<(Serializer& strm, const  ::OpenDDS::Federator::OwnerUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.sender)
    && (strm << stru.owner)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action);
}

bool operator>>(Serializer& strm,  ::OpenDDS::Federator::OwnerUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.owner)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.participant)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.domain)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.action)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::OpenDDS::Federator::OwnerUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::OpenDDS::Federator::OwnerUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::OpenDDS::Federator::OwnerUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::OpenDDS::Federator::OwnerUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::OpenDDS::Federator::OwnerUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const KeyOnly< ::OpenDDS::Federator::OwnerUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr OwnerUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<OwnerUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr OwnerUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<OwnerUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr OwnerUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<OwnerUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<OwnerUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& OwnerUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<OwnerUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool OwnerUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* OwnerUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void OwnerUpdateTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& OwnerUpdateTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::OpenDDS_Federator_OwnerUpdate_xtag>();
}

const OpenDDS::XTypes::TypeMap& OwnerUpdateTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::OpenDDS_Federator_OwnerUpdate_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& OwnerUpdateTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& OwnerUpdateTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility OwnerUpdateTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

OwnerUpdateTypeSupport::_ptr_type OwnerUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::OpenDDS::Federator::OwnerUpdate> : MetaStruct {
  typedef  ::OpenDDS::Federator::OwnerUpdate T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "sender")) {
      return true;
    }
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("sender", 0),
      std::make_pair("owner", 1),
      std::make_pair("participant", 2),
      std::make_pair("domain", 3),
      std::make_pair("action", 4),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 5);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::OwnerUpdate)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::OpenDDS::Federator::OwnerUpdate& typed = *static_cast<const  ::OpenDDS::Federator::OwnerUpdate*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return typed.owner;
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::OwnerUpdate)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "sender") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'sender' could not be skipped");
      }
    }
    if (base_field == "owner") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'owner' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'owner' could not be skipped");
      }
    }
    if (base_field == "participant") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'participant' could not be skipped");
      }
    }
    if (base_field == "domain") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'domain' could not be skipped");
      }
    }
    if (base_field == "action") {
      ACE_CDR::ULong val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'action' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strcmp(field, "owner") == 0) {
      return make_field_cmp(&T::owner, next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::OwnerUpdate)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"sender", "owner", "participant", "domain", "action", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return &static_cast<const T*>(stru)->owner;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::OwnerUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const  ::OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "owner") == 0) {
      static_cast<T*>(lhs)->owner = *static_cast<const  ::OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const  ::DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const  ::OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::OwnerUpdate)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return static_cast<const T*>(lhs)->owner == static_cast<const T*>(rhs)->owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::OwnerUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::OpenDDS::Federator::OwnerUpdate>()
{
  static MetaStructImpl< ::OpenDDS::Federator::OwnerUpdate> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::OpenDDS::Federator::OwnerUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::OpenDDS::Federator::OwnerUpdate>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: OwnerUpdate */


/* Begin CONST: OWNERUPDATETOPICNAME */


/* End CONST: OWNERUPDATETOPICNAME */


/* Begin CONST: OWNERUPDATETYPENAME */


/* End CONST: OWNERUPDATETYPENAME */


/* Begin STRUCT: TopicUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_TopicUpdate_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(78, 95, 171, 38, 239, 5, 228, 141, 129, 255, 216, 95, 103, 63));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_TopicUpdate_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::OpenDDS::Federator::TopicUpdate& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"id",0},{"sender",1},{"participant",2},{"domain",3},{"action",4},{"topic",5},{"datatype",6},{"qos",7},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!vread(value_reader, value.id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.sender)) return false;
      break;
    }
    case 2: {
      if (!vread(value_reader, value.participant)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_int32(value.domain)) return false;
      break;
    }
    case 4: {
      if (!vread(value_reader, value.action)) return false;
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.topic = x.c_str();
      }
      break;
    }
    case 6: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.datatype = x.c_str();
      }
      break;
    }
    case 7: {
      if (!vread(value_reader, value.qos)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::OpenDDS::Federator::TopicUpdate& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member("id");
  vwrite(value_writer, value.id);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("sender");
  value_writer.write_int32(value.sender);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("participant");
  vwrite(value_writer, value.participant);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("domain");
  value_writer.write_int32(value.domain);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("action");
  vwrite(value_writer, value.action);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("topic");
  value_writer.write_string(value.topic);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("datatype");
  value_writer.write_string(value.datatype);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("qos");
  vwrite(value_writer, value.qos);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::OpenDDS::Federator::TopicUpdate& stru)
{
  ACE_UNUSED_ARG(stru);
  set_default(stru.id);
  stru.sender = 0;
  set_default(stru.participant);
  stru.domain = 0;
  stru.action =  ::OpenDDS::Federator::CreateEntity;
  stru.topic = "";
  stru.datatype = "";
  set_default(stru.qos);
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::OpenDDS::Federator::TopicUpdate& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.id);
  primitive_serialized_size(encoding, size, stru.sender);
  serialized_size(encoding, size, stru.participant);
  primitive_serialized_size(encoding, size, stru.domain);
  primitive_serialized_size_ulong(encoding, size);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.topic.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.datatype.in()) + 1;
  serialized_size(encoding, size, stru.qos);
}

bool operator<<(Serializer& strm, const  ::OpenDDS::Federator::TopicUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.topic.in())
    && (strm << stru.datatype.in())
    && (strm << stru.qos);
}

bool operator>>(Serializer& strm,  ::OpenDDS::Federator::TopicUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.participant)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.domain)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.action)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.topic.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.datatype.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.qos)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::OpenDDS::Federator::TopicUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::OpenDDS::Federator::TopicUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::OpenDDS::Federator::TopicUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::OpenDDS::Federator::TopicUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::OpenDDS::Federator::TopicUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const KeyOnly< ::OpenDDS::Federator::TopicUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr TopicUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<TopicUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr TopicUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<TopicUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr TopicUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<TopicUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<TopicUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& TopicUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<TopicUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool TopicUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* TopicUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void TopicUpdateTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& TopicUpdateTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::OpenDDS_Federator_TopicUpdate_xtag>();
}

const OpenDDS::XTypes::TypeMap& TopicUpdateTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::OpenDDS_Federator_TopicUpdate_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& TopicUpdateTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& TopicUpdateTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility TopicUpdateTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

TopicUpdateTypeSupport::_ptr_type TopicUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::OpenDDS::Federator::TopicUpdate> : MetaStruct {
  typedef  ::OpenDDS::Federator::TopicUpdate T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "sender")) {
      return true;
    }
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("id", 0),
      std::make_pair("sender", 1),
      std::make_pair("participant", 2),
      std::make_pair("domain", 3),
      std::make_pair("action", 4),
      std::make_pair("topic", 5),
      std::make_pair("datatype", 6),
      std::make_pair("qos", 7),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 8);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::TopicUpdate)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::OpenDDS::Federator::TopicUpdate& typed = *static_cast<const  ::OpenDDS::Federator::TopicUpdate*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strcmp(field, "topic") == 0) {
      return typed.topic.in();
    }
    if (std::strcmp(field, "datatype") == 0) {
      return typed.datatype.in();
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return getMetaStruct< ::DDS::TopicQos>().getValue(&typed.qos, field + 4);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::TopicUpdate)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "id") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (base_field == "sender") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'sender' could not be skipped");
      }
    }
    if (base_field == "participant") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'participant' could not be skipped");
      }
    }
    if (base_field == "domain") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'domain' could not be skipped");
      }
    }
    if (base_field == "action") {
      ACE_CDR::ULong val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'action' could not be skipped");
      }
    }
    if (base_field == "topic") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'topic' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'topic' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'topic' contents could not be skipped");
      }
    }
    if (base_field == "datatype") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'datatype' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'datatype' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'datatype' contents could not be skipped");
      }
    }
    if (base_field == "qos") {
      return getMetaStruct< ::DDS::TopicQos>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::DDS::TopicQos*>(0))) {
        throw std::runtime_error("Field 'qos' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strcmp(field, "topic") == 0) {
      return make_field_cmp(&T::topic, next);
    }
    if (std::strcmp(field, "datatype") == 0) {
      return make_field_cmp(&T::datatype, next);
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return make_struct_cmp(&T::qos, getMetaStruct< ::DDS::TopicQos>().create_qc_comparator(field + 4), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::TopicUpdate)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "participant", "domain", "action", "topic", "datatype", "qos", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "topic") == 0) {
      return &static_cast<const T*>(stru)->topic;
    }
    if (std::strcmp(field, "datatype") == 0) {
      return &static_cast<const T*>(stru)->datatype;
    }
    if (std::strcmp(field, "qos") == 0) {
      return &static_cast<const T*>(stru)->qos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::TopicUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const  ::OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const  ::DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const  ::OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "topic") == 0) {
      static_cast<T*>(lhs)->topic = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "datatype") == 0) {
      static_cast<T*>(lhs)->datatype = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "qos") == 0) {
      static_cast<T*>(lhs)->qos = *static_cast<const  ::DDS::TopicQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::TopicUpdate)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    if (std::strcmp(field, "topic") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->topic.in(), static_cast<const T*>(rhs)->topic.in());
    }
    if (std::strcmp(field, "datatype") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->datatype.in(), static_cast<const T*>(rhs)->datatype.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::TopicUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::OpenDDS::Federator::TopicUpdate>()
{
  static MetaStructImpl< ::OpenDDS::Federator::TopicUpdate> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::OpenDDS::Federator::TopicUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::OpenDDS::Federator::TopicUpdate>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: TopicUpdate */


/* Begin CONST: TOPICUPDATETOPICNAME */


/* End CONST: TOPICUPDATETOPICNAME */


/* Begin CONST: TOPICUPDATETYPENAME */


/* End CONST: TOPICUPDATETYPENAME */


/* Begin STRUCT: ParticipantUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_ParticipantUpdate_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(211, 251, 218, 194, 210, 196, 113, 98, 5, 103, 24, 2, 245, 75));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_ParticipantUpdate_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::OpenDDS::Federator::ParticipantUpdate& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"id",0},{"sender",1},{"owner",2},{"domain",3},{"action",4},{"qos",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!vread(value_reader, value.id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.sender)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.owner)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_int32(value.domain)) return false;
      break;
    }
    case 4: {
      if (!vread(value_reader, value.action)) return false;
      break;
    }
    case 5: {
      if (!vread(value_reader, value.qos)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::OpenDDS::Federator::ParticipantUpdate& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member("id");
  vwrite(value_writer, value.id);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("sender");
  value_writer.write_int32(value.sender);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("owner");
  value_writer.write_int32(value.owner);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("domain");
  value_writer.write_int32(value.domain);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("action");
  vwrite(value_writer, value.action);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("qos");
  vwrite(value_writer, value.qos);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::OpenDDS::Federator::ParticipantUpdate& stru)
{
  ACE_UNUSED_ARG(stru);
  set_default(stru.id);
  stru.sender = 0;
  stru.owner = 0;
  stru.domain = 0;
  stru.action =  ::OpenDDS::Federator::CreateEntity;
  set_default(stru.qos);
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::OpenDDS::Federator::ParticipantUpdate& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.id);
  primitive_serialized_size(encoding, size, stru.sender);
  primitive_serialized_size(encoding, size, stru.owner);
  primitive_serialized_size(encoding, size, stru.domain);
  primitive_serialized_size_ulong(encoding, size);
  serialized_size(encoding, size, stru.qos);
}

bool operator<<(Serializer& strm, const  ::OpenDDS::Federator::ParticipantUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.owner)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.qos);
}

bool operator>>(Serializer& strm,  ::OpenDDS::Federator::ParticipantUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.owner)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.domain)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.action)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.qos)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::OpenDDS::Federator::ParticipantUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::OpenDDS::Federator::ParticipantUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::OpenDDS::Federator::ParticipantUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::OpenDDS::Federator::ParticipantUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::OpenDDS::Federator::ParticipantUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const KeyOnly< ::OpenDDS::Federator::ParticipantUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr ParticipantUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<ParticipantUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr ParticipantUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ParticipantUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ParticipantUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ParticipantUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<ParticipantUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ParticipantUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<ParticipantUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool ParticipantUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* ParticipantUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void ParticipantUpdateTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& ParticipantUpdateTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::OpenDDS_Federator_ParticipantUpdate_xtag>();
}

const OpenDDS::XTypes::TypeMap& ParticipantUpdateTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::OpenDDS_Federator_ParticipantUpdate_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& ParticipantUpdateTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& ParticipantUpdateTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility ParticipantUpdateTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

ParticipantUpdateTypeSupport::_ptr_type ParticipantUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::OpenDDS::Federator::ParticipantUpdate> : MetaStruct {
  typedef  ::OpenDDS::Federator::ParticipantUpdate T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "sender")) {
      return true;
    }
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("id", 0),
      std::make_pair("sender", 1),
      std::make_pair("owner", 2),
      std::make_pair("domain", 3),
      std::make_pair("action", 4),
      std::make_pair("qos", 5),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 6);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::ParticipantUpdate)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::OpenDDS::Federator::ParticipantUpdate& typed = *static_cast<const  ::OpenDDS::Federator::ParticipantUpdate*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return typed.owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return getMetaStruct< ::DDS::DomainParticipantQos>().getValue(&typed.qos, field + 4);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::ParticipantUpdate)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "id") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (base_field == "sender") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'sender' could not be skipped");
      }
    }
    if (base_field == "owner") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'owner' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'owner' could not be skipped");
      }
    }
    if (base_field == "domain") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'domain' could not be skipped");
      }
    }
    if (base_field == "action") {
      ACE_CDR::ULong val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'action' could not be skipped");
      }
    }
    if (base_field == "qos") {
      return getMetaStruct< ::DDS::DomainParticipantQos>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::DDS::DomainParticipantQos*>(0))) {
        throw std::runtime_error("Field 'qos' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strcmp(field, "owner") == 0) {
      return make_field_cmp(&T::owner, next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strncmp(field, "qos.", 4) == 0) {
      return make_struct_cmp(&T::qos, getMetaStruct< ::DDS::DomainParticipantQos>().create_qc_comparator(field + 4), next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::ParticipantUpdate)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "owner", "domain", "action", "qos", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return &static_cast<const T*>(stru)->owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "qos") == 0) {
      return &static_cast<const T*>(stru)->qos;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::ParticipantUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const  ::OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "owner") == 0) {
      static_cast<T*>(lhs)->owner = *static_cast<const  ::OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const  ::DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const  ::OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "qos") == 0) {
      static_cast<T*>(lhs)->qos = *static_cast<const  ::DDS::DomainParticipantQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::ParticipantUpdate)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "owner") == 0) {
      return static_cast<const T*>(lhs)->owner == static_cast<const T*>(rhs)->owner;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::ParticipantUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::OpenDDS::Federator::ParticipantUpdate>()
{
  static MetaStructImpl< ::OpenDDS::Federator::ParticipantUpdate> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::OpenDDS::Federator::ParticipantUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::OpenDDS::Federator::ParticipantUpdate>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ParticipantUpdate */


/* Begin CONST: PARTICIPANTUPDATETOPICNAME */


/* End CONST: PARTICIPANTUPDATETOPICNAME */


/* Begin CONST: PARTICIPANTUPDATETYPENAME */


/* End CONST: PARTICIPANTUPDATETYPENAME */


/* Begin STRUCT: PublicationUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_PublicationUpdate_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(19, 19, 72, 201, 237, 218, 91, 83, 143, 167, 84, 180, 58, 155));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_PublicationUpdate_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::OpenDDS::Federator::PublicationUpdate& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"id",0},{"sender",1},{"topic",2},{"participant",3},{"domain",4},{"action",5},{"callback",6},{"publisher_qos",7},{"datawriter_qos",8},{"transport_info",9},{"transport_context",10},{"serialized_type_info",11},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!vread(value_reader, value.id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.sender)) return false;
      break;
    }
    case 2: {
      if (!vread(value_reader, value.topic)) return false;
      break;
    }
    case 3: {
      if (!vread(value_reader, value.participant)) return false;
      break;
    }
    case 4: {
      if (!value_reader.read_int32(value.domain)) return false;
      break;
    }
    case 5: {
      if (!vread(value_reader, value.action)) return false;
      break;
    }
    case 6: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.callback = x.c_str();
      }
      break;
    }
    case 7: {
      if (!vread(value_reader, value.publisher_qos)) return false;
      break;
    }
    case 8: {
      if (!vread(value_reader, value.datawriter_qos)) return false;
      break;
    }
    case 9: {
      if (!value_reader.begin_sequence()) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
        OpenDDS::DCPS::grow(value.transport_info);
        if (!value_reader.begin_element()) return false;
        if (!vread(value_reader, value.transport_info[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    case 10: {
      if (!value_reader.read_uint32(value.transport_context)) return false;
      break;
    }
    case 11: {
      if (!value_reader.begin_sequence()) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
        OpenDDS::DCPS::grow(value.serialized_type_info);
        if (!value_reader.begin_element()) return false;
        if (!value_reader.read_byte(value.serialized_type_info[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::OpenDDS::Federator::PublicationUpdate& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member("id");
  vwrite(value_writer, value.id);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("sender");
  value_writer.write_int32(value.sender);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("topic");
  vwrite(value_writer, value.topic);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("participant");
  vwrite(value_writer, value.participant);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("domain");
  value_writer.write_int32(value.domain);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("action");
  vwrite(value_writer, value.action);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("callback");
  value_writer.write_string(value.callback);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("publisher_qos");
  vwrite(value_writer, value.publisher_qos);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("datawriter_qos");
  vwrite(value_writer, value.datawriter_qos);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("transport_info");
  value_writer.begin_sequence();
  for (::CORBA::ULong i = 0; i != value.transport_info.length(); ++i) {
    value_writer.begin_element(i);
    vwrite(value_writer, value.transport_info[i]);
    value_writer.end_element();
  }
  value_writer.end_sequence();
  value_writer.end_struct_member();
  value_writer.begin_struct_member("transport_context");
  value_writer.write_uint32(value.transport_context);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("serialized_type_info");
  value_writer.begin_sequence();
  value_writer.write_byte_array (value.serialized_type_info.get_buffer(), value.serialized_type_info.length());
  value_writer.end_sequence();
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::OpenDDS::Federator::PublicationUpdate& stru)
{
  ACE_UNUSED_ARG(stru);
  set_default(stru.id);
  stru.sender = 0;
  set_default(stru.topic);
  set_default(stru.participant);
  stru.domain = 0;
  stru.action =  ::OpenDDS::Federator::CreateEntity;
  stru.callback = "";
  set_default(stru.publisher_qos);
  set_default(stru.datawriter_qos);
  stru.transport_info.length(0);
  stru.transport_context = 0;
  stru.serialized_type_info.length(0);
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::OpenDDS::Federator::PublicationUpdate& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.id);
  primitive_serialized_size(encoding, size, stru.sender);
  serialized_size(encoding, size, stru.topic);
  serialized_size(encoding, size, stru.participant);
  primitive_serialized_size(encoding, size, stru.domain);
  primitive_serialized_size_ulong(encoding, size);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.callback.in()) + 1;
  serialized_size(encoding, size, stru.publisher_qos);
  serialized_size(encoding, size, stru.datawriter_qos);
  serialized_size(encoding, size, stru.transport_info);
  primitive_serialized_size(encoding, size, stru.transport_context);
  serialized_size(encoding, size, stru.serialized_type_info);
}

bool operator<<(Serializer& strm, const  ::OpenDDS::Federator::PublicationUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.topic)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.callback.in())
    && (strm << stru.publisher_qos)
    && (strm << stru.datawriter_qos)
    && (strm << stru.transport_info)
    && (strm << stru.transport_context)
    && (strm << stru.serialized_type_info);
}

bool operator>>(Serializer& strm,  ::OpenDDS::Federator::PublicationUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.topic)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.participant)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.domain)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.action)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.callback.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.publisher_qos)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.datawriter_qos)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.transport_info)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.transport_context)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.serialized_type_info)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::OpenDDS::Federator::PublicationUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::OpenDDS::Federator::PublicationUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::OpenDDS::Federator::PublicationUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::OpenDDS::Federator::PublicationUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::OpenDDS::Federator::PublicationUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const KeyOnly< ::OpenDDS::Federator::PublicationUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr PublicationUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<PublicationUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr PublicationUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PublicationUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr PublicationUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<PublicationUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<PublicationUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& PublicationUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<PublicationUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool PublicationUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* PublicationUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void PublicationUpdateTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& PublicationUpdateTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::OpenDDS_Federator_PublicationUpdate_xtag>();
}

const OpenDDS::XTypes::TypeMap& PublicationUpdateTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::OpenDDS_Federator_PublicationUpdate_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& PublicationUpdateTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& PublicationUpdateTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility PublicationUpdateTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

PublicationUpdateTypeSupport::_ptr_type PublicationUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::OpenDDS::Federator::PublicationUpdate> : MetaStruct {
  typedef  ::OpenDDS::Federator::PublicationUpdate T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "sender")) {
      return true;
    }
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("id", 0),
      std::make_pair("sender", 1),
      std::make_pair("topic", 2),
      std::make_pair("participant", 3),
      std::make_pair("domain", 4),
      std::make_pair("action", 5),
      std::make_pair("callback", 6),
      std::make_pair("publisher_qos", 7),
      std::make_pair("datawriter_qos", 8),
      std::make_pair("transport_info", 9),
      std::make_pair("transport_context", 10),
      std::make_pair("serialized_type_info", 11),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 12);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::PublicationUpdate)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::OpenDDS::Federator::PublicationUpdate& typed = *static_cast<const  ::OpenDDS::Federator::PublicationUpdate*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.topic, field + 6);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strcmp(field, "callback") == 0) {
      return typed.callback.in();
    }
    if (std::strncmp(field, "publisher_qos.", 14) == 0) {
      return getMetaStruct< ::DDS::PublisherQos>().getValue(&typed.publisher_qos, field + 14);
    }
    if (std::strncmp(field, "datawriter_qos.", 15) == 0) {
      return getMetaStruct< ::DDS::DataWriterQos>().getValue(&typed.datawriter_qos, field + 15);
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return typed.transport_context;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::PublicationUpdate)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "id") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (base_field == "sender") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'sender' could not be skipped");
      }
    }
    if (base_field == "topic") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'topic' could not be skipped");
      }
    }
    if (base_field == "participant") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'participant' could not be skipped");
      }
    }
    if (base_field == "domain") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'domain' could not be skipped");
      }
    }
    if (base_field == "action") {
      ACE_CDR::ULong val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'action' could not be skipped");
      }
    }
    if (base_field == "callback") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'callback' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'callback' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'callback' contents could not be skipped");
      }
    }
    if (base_field == "publisher_qos") {
      return getMetaStruct< ::DDS::PublisherQos>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::DDS::PublisherQos*>(0))) {
        throw std::runtime_error("Field 'publisher_qos' could not be skipped");
      }
    }
    if (base_field == "datawriter_qos") {
      return getMetaStruct< ::DDS::DataWriterQos>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::DDS::DataWriterQos*>(0))) {
        throw std::runtime_error("Field 'datawriter_qos' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::TransportLocatorSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "transport_context") {
      ACE_CDR::ULong val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'transport_context' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'transport_context' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::DDS::OctetSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return make_struct_cmp(&T::topic, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 6), next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strcmp(field, "callback") == 0) {
      return make_field_cmp(&T::callback, next);
    }
    if (std::strncmp(field, "publisher_qos.", 14) == 0) {
      return make_struct_cmp(&T::publisher_qos, getMetaStruct< ::DDS::PublisherQos>().create_qc_comparator(field + 14), next);
    }
    if (std::strncmp(field, "datawriter_qos.", 15) == 0) {
      return make_struct_cmp(&T::datawriter_qos, getMetaStruct< ::DDS::DataWriterQos>().create_qc_comparator(field + 15), next);
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return make_field_cmp(&T::transport_context, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::PublicationUpdate)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "topic", "participant", "domain", "action", "callback", "publisher_qos", "datawriter_qos", "transport_info", "transport_context", "serialized_type_info", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "topic") == 0) {
      return &static_cast<const T*>(stru)->topic;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return &static_cast<const T*>(stru)->callback;
    }
    if (std::strcmp(field, "publisher_qos") == 0) {
      return &static_cast<const T*>(stru)->publisher_qos;
    }
    if (std::strcmp(field, "datawriter_qos") == 0) {
      return &static_cast<const T*>(stru)->datawriter_qos;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      return &static_cast<const T*>(stru)->transport_info;
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return &static_cast<const T*>(stru)->transport_context;
    }
    if (std::strcmp(field, "serialized_type_info") == 0) {
      return &static_cast<const T*>(stru)->serialized_type_info;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::PublicationUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const  ::OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "topic") == 0) {
      static_cast<T*>(lhs)->topic = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const  ::DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const  ::OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "callback") == 0) {
      static_cast<T*>(lhs)->callback = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "publisher_qos") == 0) {
      static_cast<T*>(lhs)->publisher_qos = *static_cast<const  ::DDS::PublisherQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "datawriter_qos") == 0) {
      static_cast<T*>(lhs)->datawriter_qos = *static_cast<const  ::DDS::DataWriterQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      static_cast<T*>(lhs)->transport_info = *static_cast<const  ::OpenDDS::DCPS::TransportLocatorSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "transport_context") == 0) {
      static_cast<T*>(lhs)->transport_context = *static_cast<const  ::CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "serialized_type_info") == 0) {
      static_cast<T*>(lhs)->serialized_type_info = *static_cast<const  ::DDS::OctetSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::PublicationUpdate)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->callback.in(), static_cast<const T*>(rhs)->callback.in());
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return static_cast<const T*>(lhs)->transport_context == static_cast<const T*>(rhs)->transport_context;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::PublicationUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::OpenDDS::Federator::PublicationUpdate>()
{
  static MetaStructImpl< ::OpenDDS::Federator::PublicationUpdate> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::OpenDDS::Federator::PublicationUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::OpenDDS::Federator::PublicationUpdate>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PublicationUpdate */


/* Begin CONST: PUBLICATIONUPDATETOPICNAME */


/* End CONST: PUBLICATIONUPDATETOPICNAME */


/* Begin CONST: PUBLICATIONUPDATETYPENAME */


/* End CONST: PUBLICATIONUPDATETYPENAME */


/* Begin STRUCT: SubscriptionUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<OpenDDS_Federator_SubscriptionUpdate_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(96, 93, 209, 74, 232, 21, 94, 71, 198, 201, 237, 5, 197, 236));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<OpenDDS_Federator_SubscriptionUpdate_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::OpenDDS::Federator::SubscriptionUpdate& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"id",0},{"sender",1},{"topic",2},{"participant",3},{"domain",4},{"action",5},{"callback",6},{"subscriber_qos",7},{"datareader_qos",8},{"transport_info",9},{"transport_context",10},{"filter_class_name",11},{"filter_expression",12},{"expression_params",13},{"serialized_type_info",14},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      if (!vread(value_reader, value.id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.sender)) return false;
      break;
    }
    case 2: {
      if (!vread(value_reader, value.topic)) return false;
      break;
    }
    case 3: {
      if (!vread(value_reader, value.participant)) return false;
      break;
    }
    case 4: {
      if (!value_reader.read_int32(value.domain)) return false;
      break;
    }
    case 5: {
      if (!vread(value_reader, value.action)) return false;
      break;
    }
    case 6: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.callback = x.c_str();
      }
      break;
    }
    case 7: {
      if (!vread(value_reader, value.subscriber_qos)) return false;
      break;
    }
    case 8: {
      if (!vread(value_reader, value.datareader_qos)) return false;
      break;
    }
    case 9: {
      if (!value_reader.begin_sequence()) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
        OpenDDS::DCPS::grow(value.transport_info);
        if (!value_reader.begin_element()) return false;
        if (!vread(value_reader, value.transport_info[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    case 10: {
      if (!value_reader.read_uint32(value.transport_context)) return false;
      break;
    }
    case 11: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.filter_class_name = x.c_str();
      }
      break;
    }
    case 12: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.filter_expression = x.c_str();
      }
      break;
    }
    case 13: {
      if (!value_reader.begin_sequence()) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
        OpenDDS::DCPS::grow(value.expression_params);
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.expression_params[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    case 14: {
      if (!value_reader.begin_sequence()) return false;
      for (unsigned int i = 0; value_reader.elements_remaining(); ++i) {
        OpenDDS::DCPS::grow(value.serialized_type_info);
        if (!value_reader.begin_element()) return false;
        if (!value_reader.read_byte(value.serialized_type_info[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_sequence()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::OpenDDS::Federator::SubscriptionUpdate& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member("id");
  vwrite(value_writer, value.id);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("sender");
  value_writer.write_int32(value.sender);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("topic");
  vwrite(value_writer, value.topic);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("participant");
  vwrite(value_writer, value.participant);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("domain");
  value_writer.write_int32(value.domain);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("action");
  vwrite(value_writer, value.action);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("callback");
  value_writer.write_string(value.callback);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("subscriber_qos");
  vwrite(value_writer, value.subscriber_qos);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("datareader_qos");
  vwrite(value_writer, value.datareader_qos);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("transport_info");
  value_writer.begin_sequence();
  for (::CORBA::ULong i = 0; i != value.transport_info.length(); ++i) {
    value_writer.begin_element(i);
    vwrite(value_writer, value.transport_info[i]);
    value_writer.end_element();
  }
  value_writer.end_sequence();
  value_writer.end_struct_member();
  value_writer.begin_struct_member("transport_context");
  value_writer.write_uint32(value.transport_context);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("filter_class_name");
  value_writer.write_string(value.filter_class_name);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("filter_expression");
  value_writer.write_string(value.filter_expression);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("expression_params");
  value_writer.begin_sequence();
  for (::CORBA::ULong i = 0; i != value.expression_params.length(); ++i) {
    value_writer.begin_element(i);
    value_writer.write_string(value.expression_params[i]);
    value_writer.end_element();
  }
  value_writer.end_sequence();
  value_writer.end_struct_member();
  value_writer.begin_struct_member("serialized_type_info");
  value_writer.begin_sequence();
  value_writer.write_byte_array (value.serialized_type_info.get_buffer(), value.serialized_type_info.length());
  value_writer.end_sequence();
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::OpenDDS::Federator::SubscriptionUpdate& stru)
{
  ACE_UNUSED_ARG(stru);
  set_default(stru.id);
  stru.sender = 0;
  set_default(stru.topic);
  set_default(stru.participant);
  stru.domain = 0;
  stru.action =  ::OpenDDS::Federator::CreateEntity;
  stru.callback = "";
  set_default(stru.subscriber_qos);
  set_default(stru.datareader_qos);
  stru.transport_info.length(0);
  stru.transport_context = 0;
  stru.filter_class_name = "";
  stru.filter_expression = "";
  stru.expression_params.length(0);
  stru.serialized_type_info.length(0);
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::OpenDDS::Federator::SubscriptionUpdate& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  serialized_size(encoding, size, stru.id);
  primitive_serialized_size(encoding, size, stru.sender);
  serialized_size(encoding, size, stru.topic);
  serialized_size(encoding, size, stru.participant);
  primitive_serialized_size(encoding, size, stru.domain);
  primitive_serialized_size_ulong(encoding, size);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.callback.in()) + 1;
  serialized_size(encoding, size, stru.subscriber_qos);
  serialized_size(encoding, size, stru.datareader_qos);
  serialized_size(encoding, size, stru.transport_info);
  primitive_serialized_size(encoding, size, stru.transport_context);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.filter_class_name.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.filter_expression.in()) + 1;
  serialized_size(encoding, size, stru.expression_params);
  serialized_size(encoding, size, stru.serialized_type_info);
}

bool operator<<(Serializer& strm, const  ::OpenDDS::Federator::SubscriptionUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.id)
    && (strm << stru.sender)
    && (strm << stru.topic)
    && (strm << stru.participant)
    && (strm << stru.domain)
    && (strm << stru.action)
    && (strm << stru.callback.in())
    && (strm << stru.subscriber_qos)
    && (strm << stru.datareader_qos)
    && (strm << stru.transport_info)
    && (strm << stru.transport_context)
    && (strm << stru.filter_class_name.in())
    && (strm << stru.filter_expression.in())
    && (strm << stru.expression_params)
    && (strm << stru.serialized_type_info);
}

bool operator>>(Serializer& strm,  ::OpenDDS::Federator::SubscriptionUpdate& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.topic)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.participant)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.domain)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.action)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.callback.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.subscriber_qos)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.datareader_qos)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.transport_info)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.transport_context)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.filter_class_name.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.filter_expression.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.expression_params)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.serialized_type_info)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::OpenDDS::Federator::SubscriptionUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::OpenDDS::Federator::SubscriptionUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::OpenDDS::Federator::SubscriptionUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::OpenDDS::Federator::SubscriptionUpdate>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.sender);
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::OpenDDS::Federator::SubscriptionUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.sender);
}

bool operator>>(Serializer& strm, const KeyOnly< ::OpenDDS::Federator::SubscriptionUpdate>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.sender)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
::DDS::DataWriter_ptr SubscriptionUpdateTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<SubscriptionUpdate> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr SubscriptionUpdateTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SubscriptionUpdate> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr SubscriptionUpdateTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<SubscriptionUpdate> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<SubscriptionUpdate, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& SubscriptionUpdateTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<SubscriptionUpdate>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool SubscriptionUpdateTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* SubscriptionUpdateTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void SubscriptionUpdateTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& SubscriptionUpdateTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::OpenDDS_Federator_SubscriptionUpdate_xtag>();
}

const OpenDDS::XTypes::TypeMap& SubscriptionUpdateTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::OpenDDS_Federator_SubscriptionUpdate_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& SubscriptionUpdateTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& SubscriptionUpdateTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

OpenDDS::DCPS::Extensibility SubscriptionUpdateTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

SubscriptionUpdateTypeSupport::_ptr_type SubscriptionUpdateTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::OpenDDS::Federator::SubscriptionUpdate> : MetaStruct {
  typedef  ::OpenDDS::Federator::SubscriptionUpdate T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "sender")) {
      return true;
    }
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("id", 0),
      std::make_pair("sender", 1),
      std::make_pair("topic", 2),
      std::make_pair("participant", 3),
      std::make_pair("domain", 4),
      std::make_pair("action", 5),
      std::make_pair("callback", 6),
      std::make_pair("subscriber_qos", 7),
      std::make_pair("datareader_qos", 8),
      std::make_pair("transport_info", 9),
      std::make_pair("transport_context", 10),
      std::make_pair("filter_class_name", 11),
      std::make_pair("filter_expression", 12),
      std::make_pair("expression_params", 13),
      std::make_pair("serialized_type_info", 14),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 15);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::SubscriptionUpdate)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::OpenDDS::Federator::SubscriptionUpdate& typed = *static_cast<const  ::OpenDDS::Federator::SubscriptionUpdate*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strncmp(field, "id.", 3) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.id, field + 3);
    }
    if (std::strcmp(field, "sender") == 0) {
      return typed.sender;
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.topic, field + 6);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return getMetaStruct< ::OpenDDS::Federator::FederationId>().getValue(&typed.participant, field + 12);
    }
    if (std::strcmp(field, "domain") == 0) {
      return typed.domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return gen_OpenDDS_Federator_UpdateType_names[typed.action];
    }
    if (std::strcmp(field, "callback") == 0) {
      return typed.callback.in();
    }
    if (std::strncmp(field, "subscriber_qos.", 15) == 0) {
      return getMetaStruct< ::DDS::SubscriberQos>().getValue(&typed.subscriber_qos, field + 15);
    }
    if (std::strncmp(field, "datareader_qos.", 15) == 0) {
      return getMetaStruct< ::DDS::DataReaderQos>().getValue(&typed.datareader_qos, field + 15);
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return typed.transport_context;
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return typed.filter_class_name.in();
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return typed.filter_expression.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::SubscriptionUpdate)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "id") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (base_field == "sender") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'sender' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'sender' could not be skipped");
      }
    }
    if (base_field == "topic") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'topic' could not be skipped");
      }
    }
    if (base_field == "participant") {
      return getMetaStruct< ::OpenDDS::DCPS::GUID_t>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::GUID_t*>(0))) {
        throw std::runtime_error("Field 'participant' could not be skipped");
      }
    }
    if (base_field == "domain") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'domain' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'domain' could not be skipped");
      }
    }
    if (base_field == "action") {
      ACE_CDR::ULong val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'action' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'action' could not be skipped");
      }
    }
    if (base_field == "callback") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'callback' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'callback' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'callback' contents could not be skipped");
      }
    }
    if (base_field == "subscriber_qos") {
      return getMetaStruct< ::DDS::SubscriberQos>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::DDS::SubscriberQos*>(0))) {
        throw std::runtime_error("Field 'subscriber_qos' could not be skipped");
      }
    }
    if (base_field == "datareader_qos") {
      return getMetaStruct< ::DDS::DataReaderQos>().getValue(strm, subfield.c_str());
    } else {
      if (!gen_skip_over(strm, static_cast< ::DDS::DataReaderQos*>(0))) {
        throw std::runtime_error("Field 'datareader_qos' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::OpenDDS::DCPS::TransportLocatorSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "transport_context") {
      ACE_CDR::ULong val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'transport_context' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'transport_context' could not be skipped");
      }
    }
    if (base_field == "filter_class_name") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'filter_class_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'filter_class_name' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'filter_class_name' contents could not be skipped");
      }
    }
    if (base_field == "filter_expression") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'filter_expression' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'filter_expression' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'filter_expression' contents could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::DDS::StringSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(strm, static_cast< ::DDS::OctetSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "id.", 3) == 0) {
      return make_struct_cmp(&T::id, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 3), next);
    }
    if (std::strcmp(field, "sender") == 0) {
      return make_field_cmp(&T::sender, next);
    }
    if (std::strncmp(field, "topic.", 6) == 0) {
      return make_struct_cmp(&T::topic, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 6), next);
    }
    if (std::strncmp(field, "participant.", 12) == 0) {
      return make_struct_cmp(&T::participant, getMetaStruct< ::OpenDDS::Federator::FederationId>().create_qc_comparator(field + 12), next);
    }
    if (std::strcmp(field, "domain") == 0) {
      return make_field_cmp(&T::domain, next);
    }
    if (std::strcmp(field, "action") == 0) {
      return make_field_cmp(&T::action, next);
    }
    if (std::strcmp(field, "callback") == 0) {
      return make_field_cmp(&T::callback, next);
    }
    if (std::strncmp(field, "subscriber_qos.", 15) == 0) {
      return make_struct_cmp(&T::subscriber_qos, getMetaStruct< ::DDS::SubscriberQos>().create_qc_comparator(field + 15), next);
    }
    if (std::strncmp(field, "datareader_qos.", 15) == 0) {
      return make_struct_cmp(&T::datareader_qos, getMetaStruct< ::DDS::DataReaderQos>().create_qc_comparator(field + 15), next);
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return make_field_cmp(&T::transport_context, next);
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return make_field_cmp(&T::filter_class_name, next);
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return make_field_cmp(&T::filter_expression, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::SubscriptionUpdate)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sender", "topic", "participant", "domain", "action", "callback", "subscriber_qos", "datareader_qos", "transport_info", "transport_context", "filter_class_name", "filter_expression", "expression_params", "serialized_type_info", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sender") == 0) {
      return &static_cast<const T*>(stru)->sender;
    }
    if (std::strcmp(field, "topic") == 0) {
      return &static_cast<const T*>(stru)->topic;
    }
    if (std::strcmp(field, "participant") == 0) {
      return &static_cast<const T*>(stru)->participant;
    }
    if (std::strcmp(field, "domain") == 0) {
      return &static_cast<const T*>(stru)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return &static_cast<const T*>(stru)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return &static_cast<const T*>(stru)->callback;
    }
    if (std::strcmp(field, "subscriber_qos") == 0) {
      return &static_cast<const T*>(stru)->subscriber_qos;
    }
    if (std::strcmp(field, "datareader_qos") == 0) {
      return &static_cast<const T*>(stru)->datareader_qos;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      return &static_cast<const T*>(stru)->transport_info;
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return &static_cast<const T*>(stru)->transport_context;
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return &static_cast<const T*>(stru)->filter_class_name;
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return &static_cast<const T*>(stru)->filter_expression;
    }
    if (std::strcmp(field, "expression_params") == 0) {
      return &static_cast<const T*>(stru)->expression_params;
    }
    if (std::strcmp(field, "serialized_type_info") == 0) {
      return &static_cast<const T*>(stru)->serialized_type_info;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::SubscriptionUpdate)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sender") == 0) {
      static_cast<T*>(lhs)->sender = *static_cast<const  ::OpenDDS::Federator::RepoKey*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "topic") == 0) {
      static_cast<T*>(lhs)->topic = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "participant") == 0) {
      static_cast<T*>(lhs)->participant = *static_cast<const  ::OpenDDS::Federator::FederationId*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "domain") == 0) {
      static_cast<T*>(lhs)->domain = *static_cast<const  ::DDS::DomainId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "action") == 0) {
      static_cast<T*>(lhs)->action = *static_cast<const  ::OpenDDS::Federator::UpdateType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "callback") == 0) {
      static_cast<T*>(lhs)->callback = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subscriber_qos") == 0) {
      static_cast<T*>(lhs)->subscriber_qos = *static_cast<const  ::DDS::SubscriberQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "datareader_qos") == 0) {
      static_cast<T*>(lhs)->datareader_qos = *static_cast<const  ::DDS::DataReaderQos*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "transport_info") == 0) {
      static_cast<T*>(lhs)->transport_info = *static_cast<const  ::OpenDDS::DCPS::TransportLocatorSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "transport_context") == 0) {
      static_cast<T*>(lhs)->transport_context = *static_cast<const  ::CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      static_cast<T*>(lhs)->filter_class_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      static_cast<T*>(lhs)->filter_expression = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "expression_params") == 0) {
      static_cast<T*>(lhs)->expression_params = *static_cast<const  ::DDS::StringSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "serialized_type_info") == 0) {
      static_cast<T*>(lhs)->serialized_type_info = *static_cast<const  ::DDS::OctetSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::SubscriptionUpdate)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sender") == 0) {
      return static_cast<const T*>(lhs)->sender == static_cast<const T*>(rhs)->sender;
    }
    if (std::strcmp(field, "domain") == 0) {
      return static_cast<const T*>(lhs)->domain == static_cast<const T*>(rhs)->domain;
    }
    if (std::strcmp(field, "action") == 0) {
      return static_cast<const T*>(lhs)->action == static_cast<const T*>(rhs)->action;
    }
    if (std::strcmp(field, "callback") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->callback.in(), static_cast<const T*>(rhs)->callback.in());
    }
    if (std::strcmp(field, "transport_context") == 0) {
      return static_cast<const T*>(lhs)->transport_context == static_cast<const T*>(rhs)->transport_context;
    }
    if (std::strcmp(field, "filter_class_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->filter_class_name.in(), static_cast<const T*>(rhs)->filter_class_name.in());
    }
    if (std::strcmp(field, "filter_expression") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->filter_expression.in(), static_cast<const T*>(rhs)->filter_expression.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::OpenDDS::Federator::SubscriptionUpdate)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::OpenDDS::Federator::SubscriptionUpdate>()
{
  static MetaStructImpl< ::OpenDDS::Federator::SubscriptionUpdate> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::OpenDDS::Federator::SubscriptionUpdate*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::OpenDDS::Federator::SubscriptionUpdate>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SubscriptionUpdate */


/* Begin CONST: SUBSCRIPTIONUPDATETOPICNAME */


/* End CONST: SUBSCRIPTIONUPDATETOPICNAME */


/* Begin CONST: SUBSCRIPTIONUPDATETYPENAME */


/* End CONST: SUBSCRIPTIONUPDATETYPENAME */


/* Begin EXCEPTION: Incomplete */


/* End EXCEPTION: Incomplete */


/* Begin INTERFACE: Manager */


/* End INTERFACE: Manager */


/* Begin CONST: REPOSITORY_IORTABLE_KEY */


/* End CONST: REPOSITORY_IORTABLE_KEY */


/* Begin CONST: FEDERATOR_IORTABLE_KEY */


/* End CONST: FEDERATOR_IORTABLE_KEY */

/* End MODULE: Federator */

/* End MODULE: OpenDDS */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject minimal_to0()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(146, 200, 199, 70))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(27, 204, 23, 153))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(2, 0), XTypes::MinimalMemberDetail(107, 155, 68, 175))))));
}

XTypes::TypeObject minimal_to1()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(100, 238, 166, 39, 32, 19, 40, 15, 122, 38, 196, 108, 92, 235))), XTypes::MinimalMemberDetail(253, 205, 10, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 181, 151, 115, 213, 177, 180, 9, 132, 39, 177, 177, 17, 73))), XTypes::MinimalMemberDetail(43, 95, 162, 89))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(249, 220, 91, 156, 138, 84, 101, 172, 94, 24, 208, 47, 246, 97))), XTypes::MinimalMemberDetail(48, 228, 130, 168))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(60, 117, 248, 112, 147, 91, 68, 168, 11, 3, 20, 69, 18, 103))), XTypes::MinimalMemberDetail(229, 133, 229, 140))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(124, 142, 29, 210, 235, 194, 71, 74, 224, 238, 85, 212, 254, 14))), XTypes::MinimalMemberDetail(80, 95, 23, 227))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(242, 50, 226, 240, 16, 38, 237, 211, 144, 26, 4, 228, 64, 49))), XTypes::MinimalMemberDetail(70, 79, 228, 234))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(64, 153, 42, 211, 60, 176, 197, 202, 87, 208, 76, 33, 217, 95))), XTypes::MinimalMemberDetail(242, 66, 248, 89))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(7, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(92, 134, 207, 218, 252, 230, 84, 67, 234, 253, 117, 33, 200, 190))), XTypes::MinimalMemberDetail(60, 209, 95, 143))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(8, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(137, 232, 76, 116, 89, 157, 186, 5, 187, 186, 116, 229, 106, 25))), XTypes::MinimalMemberDetail(15, 202, 164, 60))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(9, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 105, 130, 244, 157, 180, 157, 207, 230, 211, 204, 157, 170, 152))), XTypes::MinimalMemberDetail(27, 42, 197, 216))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(10, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(60, 117, 248, 112, 147, 91, 68, 168, 11, 3, 20, 69, 18, 103))), XTypes::MinimalMemberDetail(13, 138, 191, 79))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(11, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(209, 232, 20, 211, 202, 90, 192, 71, 75, 28, 36, 160, 70, 23))), XTypes::MinimalMemberDetail(56, 142, 141, 25))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(12, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(210, 79, 164, 66, 51, 227, 220, 142, 250, 164, 226, 216, 141, 105))), XTypes::MinimalMemberDetail(180, 107, 81, 123))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(13, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 105, 130, 244, 157, 180, 157, 207, 230, 211, 204, 157, 170, 152))), XTypes::MinimalMemberDetail(170, 93, 128, 221))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(14, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(151, 133, 93, 97, 88, 230, 235, 85, 240, 208, 235, 75, 68, 253))), XTypes::MinimalMemberDetail(161, 47, 124, 21))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(15, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(235, 175, 160, 15, 211, 82, 49, 64, 142, 195, 195, 17, 53, 6))), XTypes::MinimalMemberDetail(238, 22, 117, 90))))));
}

XTypes::TypeObject minimal_to2()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_ARRAY_SMALL, XTypes::PlainArraySElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_BOTH, XTypes::TRY_CONSTRUCT1), XTypes::SBoundSeq().append(3), XTypes::TypeIdentifier(XTypes::TK_BYTE))))))));
}

XTypes::TypeObject minimal_to3()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(184, 11, 183, 116))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(134, 198, 29, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(157, 155, 104, 172))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(228, 45, 176, 249))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(173, 95, 130, 232))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(85, 82, 253, 89, 77, 255, 166, 87, 160, 151, 85, 214, 7, 68))), XTypes::MinimalMemberDetail(65, 140, 85, 9))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(146, 74, 140, 238))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(7, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 56, 73, 18, 9, 183, 3, 167, 93, 113, 230, 154, 87, 113))), XTypes::MinimalMemberDetail(179, 71, 232, 165))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(8, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(9, 122, 150, 104, 250, 78, 157, 83, 255, 157, 123, 250, 229, 93))), XTypes::MinimalMemberDetail(44, 45, 226, 124))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(9, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(236, 248, 8, 220, 236, 201, 133, 108, 218, 21, 16, 3, 142, 168))), XTypes::MinimalMemberDetail(21, 218, 39, 68))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(10, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_UINT32)), XTypes::MinimalMemberDetail(46, 77, 10, 210))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(11, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 137, 249, 174, 25, 230, 75, 33, 116, 39, 204, 87, 125, 85))), XTypes::MinimalMemberDetail(68, 124, 211, 201))))));
}

XTypes::TypeObject minimal_to4()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 137, 249, 174, 25, 230, 75, 33, 116, 39, 204, 87, 125, 85)))))));
}

XTypes::TypeObject minimal_to5()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(124, 184, 31, 69))))));
}

XTypes::TypeObject minimal_to6()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(176, 104, 147, 28))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(32, 99, 193, 96))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(143, 108, 196, 87))))));
}

XTypes::TypeObject minimal_to7()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(157, 89, 81, 62))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(29, 184, 244, 149, 52, 65, 12, 119, 163, 176, 63, 222, 239, 135))), XTypes::MinimalMemberDetail(141, 119, 127, 56))))));
}

XTypes::TypeObject minimal_to8()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(100, 238, 166, 39, 32, 19, 40, 15, 122, 38, 196, 108, 92, 235))), XTypes::MinimalMemberDetail(253, 205, 10, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(249, 220, 91, 156, 138, 84, 101, 172, 94, 24, 208, 47, 246, 97))), XTypes::MinimalMemberDetail(48, 228, 130, 168))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(60, 117, 248, 112, 147, 91, 68, 168, 11, 3, 20, 69, 18, 103))), XTypes::MinimalMemberDetail(229, 133, 229, 140))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(124, 142, 29, 210, 235, 194, 71, 74, 224, 238, 85, 212, 254, 14))), XTypes::MinimalMemberDetail(80, 95, 23, 227))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(242, 50, 226, 240, 16, 38, 237, 211, 144, 26, 4, 228, 64, 49))), XTypes::MinimalMemberDetail(70, 79, 228, 234))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(64, 153, 42, 211, 60, 176, 197, 202, 87, 208, 76, 33, 217, 95))), XTypes::MinimalMemberDetail(242, 66, 248, 89))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(92, 134, 207, 218, 252, 230, 84, 67, 234, 253, 117, 33, 200, 190))), XTypes::MinimalMemberDetail(60, 209, 95, 143))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(7, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(137, 232, 76, 116, 89, 157, 186, 5, 187, 186, 116, 229, 106, 25))), XTypes::MinimalMemberDetail(15, 202, 164, 60))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(8, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(209, 232, 20, 211, 202, 90, 192, 71, 75, 28, 36, 160, 70, 23))), XTypes::MinimalMemberDetail(56, 142, 141, 25))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(9, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(210, 79, 164, 66, 51, 227, 220, 142, 250, 164, 226, 216, 141, 105))), XTypes::MinimalMemberDetail(180, 107, 81, 123))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(10, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(31, 6, 116, 55, 219, 248, 173, 205, 16, 32, 79, 197, 188, 37))), XTypes::MinimalMemberDetail(248, 53, 38, 241))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(11, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(128, 6, 106, 169, 239, 151, 91, 255, 81, 243, 37, 38, 187, 17))), XTypes::MinimalMemberDetail(201, 231, 175, 233))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(12, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(235, 175, 160, 15, 211, 82, 49, 64, 142, 195, 195, 17, 53, 6))), XTypes::MinimalMemberDetail(238, 22, 117, 90))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(13, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(152, 77, 214, 192, 169, 112, 53, 41, 126, 186, 125, 231, 193, 225))), XTypes::MinimalMemberDetail(184, 135, 19, 246))))));
}

XTypes::TypeObject minimal_to9()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(32, 99, 193, 96))))));
}

XTypes::TypeObject minimal_to10()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 124, 74, 82, 33, 209, 171, 154, 100, 92, 69, 182, 34, 215))), XTypes::MinimalMemberDetail(144, 105, 124, 76))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(28, 106, 127, 179))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(25, 186, 87, 68))))));
}

XTypes::TypeObject minimal_to11()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(184, 94, 195, 20))))));
}

XTypes::TypeObject minimal_to12()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(233, 42, 172, 155))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(208, 123, 134, 189))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(2, 0), XTypes::MinimalMemberDetail(11, 60, 225, 99))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(3, 0), XTypes::MinimalMemberDetail(47, 181, 127, 223))))));
}

XTypes::TypeObject minimal_to13()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(212, 19, 36, 204, 216, 207, 229, 8, 101, 152, 15, 215, 71, 23))), XTypes::MinimalMemberDetail(217, 57, 170, 247))))));
}

XTypes::TypeObject minimal_to14()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_SEQUENCE_SMALL, XTypes::PlainSequenceSElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_MINIMAL, XTypes::TRY_CONSTRUCT1), 0, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(181, 89, 73, 243, 195, 120, 183, 199, 143, 190, 155, 193, 233, 148)))))))));
}

XTypes::TypeObject minimal_to15()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(209, 232, 20, 211, 202, 90, 192, 71, 75, 28, 36, 160, 70, 23))), XTypes::MinimalMemberDetail(56, 142, 141, 25))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(208, 131, 188, 155, 96, 118, 238, 78, 31, 220, 1, 243, 99, 160))), XTypes::MinimalMemberDetail(196, 4, 33, 100))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(74, 39, 56, 203, 127, 182, 9, 1, 220, 224, 1, 152, 231, 249))), XTypes::MinimalMemberDetail(26, 141, 180, 201))))));
}

XTypes::TypeObject minimal_to16()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(106, 77, 176, 72, 18, 12, 173, 22, 88, 169, 114, 73, 204, 116))), XTypes::MinimalMemberDetail(32, 99, 193, 96))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(125, 68, 172, 132, 224, 239, 218, 60, 192, 71, 15, 147, 30, 246))), XTypes::MinimalMemberDetail(153, 141, 15, 107))))));
}

XTypes::TypeObject minimal_to17()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(184, 11, 183, 116))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(134, 198, 29, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(228, 45, 176, 249))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(173, 95, 130, 232))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(85, 82, 253, 89, 77, 255, 166, 87, 160, 151, 85, 214, 7, 68))), XTypes::MinimalMemberDetail(65, 140, 85, 9))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(157, 155, 104, 172))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(57, 49, 16, 141))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(7, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(237, 11, 165, 89, 87, 253, 32, 30, 237, 205, 192, 158, 220, 92))), XTypes::MinimalMemberDetail(197, 20, 224, 62))))));
}

XTypes::TypeObject minimal_to18()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(205, 137, 153, 252))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(110, 107, 166, 236))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(2, 0), XTypes::MinimalMemberDetail(210, 215, 186, 32))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(3, 0), XTypes::MinimalMemberDetail(198, 219, 250, 33))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(4, 0), XTypes::MinimalMemberDetail(28, 86, 217, 249))))));
}

XTypes::TypeObject minimal_to19()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(245, 123, 132, 90, 230, 57, 154, 195, 107, 24, 104, 193, 118, 23))), XTypes::MinimalMemberDetail(217, 57, 170, 247))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(18, 160, 85, 191))))));
}

XTypes::TypeObject minimal_to20()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(184, 11, 183, 116))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(134, 198, 29, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(157, 155, 104, 172))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(228, 45, 176, 249))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(173, 95, 130, 232))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(85, 82, 253, 89, 77, 255, 166, 87, 160, 151, 85, 214, 7, 68))), XTypes::MinimalMemberDetail(65, 140, 85, 9))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(146, 74, 140, 238))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(7, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 56, 73, 18, 9, 183, 3, 167, 93, 113, 230, 154, 87, 113))), XTypes::MinimalMemberDetail(200, 123, 50, 186))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(8, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(55, 10, 190, 230, 50, 127, 48, 223, 212, 68, 18, 125, 171, 30))), XTypes::MinimalMemberDetail(54, 215, 72, 151))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(9, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(236, 248, 8, 220, 236, 201, 133, 108, 218, 21, 16, 3, 142, 168))), XTypes::MinimalMemberDetail(21, 218, 39, 68))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(10, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_UINT32)), XTypes::MinimalMemberDetail(46, 77, 10, 210))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(11, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(7, 184, 58, 115))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(12, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(59, 167, 102, 50))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(13, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(158, 69, 47, 201, 4, 49, 53, 18, 62, 98, 81, 112, 219, 57))), XTypes::MinimalMemberDetail(68, 195, 217, 154))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(14, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 137, 249, 174, 25, 230, 75, 33, 116, 39, 204, 87, 125, 85))), XTypes::MinimalMemberDetail(68, 124, 211, 201))))));
}

XTypes::TypeObject minimal_to21()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(62, 114, 125, 184, 14, 246, 184, 86, 96, 15, 47, 72, 182, 26))), XTypes::MinimalMemberDetail(217, 57, 170, 247))))));
}

XTypes::TypeObject minimal_to22()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_SEQUENCE_SMALL, XTypes::PlainSequenceSElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_MINIMAL, XTypes::TRY_CONSTRUCT1), 0, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(47, 136, 233, 191, 112, 193, 42, 150, 67, 246, 172, 37, 197, 132)))))))));
}

XTypes::TypeObject minimal_to23()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(104, 240, 63, 69))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(106, 40, 90, 134))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(2, 0), XTypes::MinimalMemberDetail(230, 32, 45, 146))))));
}

XTypes::TypeObject minimal_to24()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_SEQUENCE_SMALL, XTypes::PlainSequenceSElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_BOTH, XTypes::TRY_CONSTRUCT1), 0, XTypes::TypeIdentifier(XTypes::TK_BYTE))))))));
}

XTypes::TypeObject minimal_to25()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(12, 87, 212, 43))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(245, 123, 132, 90, 230, 57, 154, 195, 107, 24, 104, 193, 118, 23))), XTypes::MinimalMemberDetail(35, 210, 249, 96))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(82, 73, 45, 112))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(167, 83, 247, 140))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(65, 192, 149, 169))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(1, 216, 160, 135))))));
}

XTypes::TypeObject minimal_to26()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(1, 78, 93, 82, 90, 169, 236, 225, 40, 97, 126, 118, 81, 144))), XTypes::MinimalMemberDetail(217, 57, 170, 247))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(223, 134, 34, 208))))));
}

XTypes::TypeObject minimal_to27()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_SEQUENCE_SMALL, XTypes::PlainSequenceSElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_MINIMAL, XTypes::TRY_CONSTRUCT1), 0, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(251, 95, 64, 60, 163, 23, 170, 158, 193, 148, 167, 7, 12, 36)))))))));
}

XTypes::TypeObject minimal_to28()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 149, 192, 63, 50, 11, 43, 195, 162, 242, 193, 5, 215, 102))), XTypes::MinimalMemberDetail(36, 134, 146, 58))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(205, 99, 9, 235, 218, 120, 77, 82, 48, 128, 213, 135, 32, 100))), XTypes::MinimalMemberDetail(112, 19, 186, 155))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(209, 232, 20, 211, 202, 90, 192, 71, 75, 28, 36, 160, 70, 23))), XTypes::MinimalMemberDetail(249, 86, 165, 139))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(208, 131, 188, 155, 96, 118, 238, 78, 31, 220, 1, 243, 99, 160))), XTypes::MinimalMemberDetail(196, 4, 33, 100))))));
}

XTypes::TypeObject minimal_to29()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(217, 161, 56, 60))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(157, 130, 84, 170))))));
}

XTypes::TypeObject minimal_to30()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(167, 83, 247, 140))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(65, 192, 149, 169))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(1, 216, 160, 135))))));
}

XTypes::TypeObject minimal_to31()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TK_INT32))))));
}

XTypes::TypeObject minimal_to32()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211)))))));
}

XTypes::TypeObject minimal_to33()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(174, 221, 205, 216))))));
}

XTypes::TypeObject minimal_to34()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(181, 89, 73, 243, 195, 120, 183, 199, 143, 190, 155, 193, 233, 148))), XTypes::MinimalMemberDetail(217, 57, 170, 247))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(64, 188, 63, 150))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(5, 165, 180, 122))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(107, 61, 225, 31))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(70, 41, 47, 174))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(245, 160, 163, 241))))));
}

XTypes::TypeObject minimal_to35()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_SEQUENCE_SMALL, XTypes::PlainSequenceSElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_BOTH, XTypes::TRY_CONSTRUCT1), 0, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0)))))))));
}

XTypes::TypeObject minimal_to36()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_FINAL | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(165, 173, 118, 203, 157, 101, 145, 117, 30, 199, 19, 174, 160, 45))), XTypes::MinimalMemberDetail(157, 112, 43, 158))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(233, 193, 171, 70, 109, 161, 107, 219, 39, 127, 52, 90, 149, 159))), XTypes::MinimalMemberDetail(177, 178, 109, 157))))));
}

XTypes::TypeObject minimal_to37()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_ARRAY_SMALL, XTypes::PlainArraySElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_BOTH, XTypes::TRY_CONSTRUCT1), XTypes::SBoundSeq().append(12), XTypes::TypeIdentifier(XTypes::TK_BYTE))))))));
}

XTypes::TypeObject minimal_to38()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(122, 244, 39, 138))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(142, 251, 174, 249))))));
}

XTypes::TypeObject minimal_to39()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TK_INT16))))));
}

XTypes::TypeObject minimal_to40()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(134, 198, 29, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(114, 18, 44, 233))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(228, 45, 176, 249))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(173, 95, 130, 232))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(85, 82, 253, 89, 77, 255, 166, 87, 160, 151, 85, 214, 7, 68))), XTypes::MinimalMemberDetail(65, 140, 85, 9))))));
}

XTypes::TypeObject minimal_to41()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(158, 69, 47, 201, 4, 49, 53, 18, 62, 98, 81, 112, 219, 57))), XTypes::MinimalMemberDetail(176, 104, 147, 28))))));
}

XTypes::TypeObject minimal_to42()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(161, 246, 92, 76, 74, 229, 72, 164, 39, 201, 223, 110, 41, 253)))))));
}

XTypes::TypeObject minimal_to43()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(16, 167, 14, 140))))));
}

XTypes::TypeObject minimal_to44()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 137, 249, 174, 25, 230, 75, 33, 116, 39, 204, 87, 125, 85))), XTypes::MinimalMemberDetail(32, 99, 193, 96))))));
}

XTypes::TypeObject minimal_to45()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(253, 72, 63, 147, 206, 16, 241, 72, 186, 231, 206, 213, 79, 158))), XTypes::MinimalMemberDetail(217, 57, 170, 247))))));
}

XTypes::TypeObject minimal_to46()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))), XTypes::MinimalMemberDetail(184, 11, 183, 116))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(134, 198, 29, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(114, 18, 44, 233))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))), XTypes::MinimalMemberDetail(173, 95, 130, 232))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(85, 82, 253, 89, 77, 255, 166, 87, 160, 151, 85, 214, 7, 68))), XTypes::MinimalMemberDetail(65, 140, 85, 9))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(71, 236, 37, 142, 102, 93, 176, 108, 48, 171, 95, 217, 45, 102))), XTypes::MinimalMemberDetail(197, 20, 224, 62))))));
}

XTypes::TypeObject minimal_to47()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(43, 67, 125, 32))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(249, 191, 143, 65))))));
}

XTypes::TypeObject minimal_to48()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_FINAL | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(10, 230, 147, 187, 255, 15, 178, 29, 139, 101, 226, 215, 223, 44))), XTypes::MinimalMemberDetail(87, 2, 74, 74))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY, XTypes::TypeIdentifier(XTypes::TK_BYTE)), XTypes::MinimalMemberDetail(61, 5, 144, 205))))));
}

XTypes::TypeObject minimal_to49()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(68, 31, 169, 229, 223, 19, 38, 65, 134, 73, 192, 156, 90, 188))), XTypes::MinimalMemberDetail(32, 99, 193, 96))))));
}

XTypes::TypeObject minimal_to50()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0, XTypes::MinimalAliasHeader(), XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0, XTypes::TypeIdentifier(XTypes::TI_PLAIN_SEQUENCE_SMALL, XTypes::PlainSequenceSElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_MINIMAL, XTypes::TRY_CONSTRUCT1), 0, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(50, 235, 25, 172, 15, 65, 98, 13, 167, 52, 8, 137, 206, 198)))))))));
}

XTypes::TypeObject minimal_to51()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(209, 232, 20, 211, 202, 90, 192, 71, 75, 28, 36, 160, 70, 23))), XTypes::MinimalMemberDetail(141, 115, 88, 91))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(100, 238, 166, 39, 32, 19, 40, 15, 122, 38, 196, 108, 92, 235))), XTypes::MinimalMemberDetail(253, 205, 10, 37))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 181, 151, 115, 213, 177, 180, 9, 132, 39, 177, 177, 17, 73))), XTypes::MinimalMemberDetail(43, 95, 162, 89))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(249, 220, 91, 156, 138, 84, 101, 172, 94, 24, 208, 47, 246, 97))), XTypes::MinimalMemberDetail(48, 228, 130, 168))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(60, 117, 248, 112, 147, 91, 68, 168, 11, 3, 20, 69, 18, 103))), XTypes::MinimalMemberDetail(229, 133, 229, 140))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(124, 142, 29, 210, 235, 194, 71, 74, 224, 238, 85, 212, 254, 14))), XTypes::MinimalMemberDetail(80, 95, 23, 227))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(242, 50, 226, 240, 16, 38, 237, 211, 144, 26, 4, 228, 64, 49))), XTypes::MinimalMemberDetail(70, 79, 228, 234))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(7, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(64, 153, 42, 211, 60, 176, 197, 202, 87, 208, 76, 33, 217, 95))), XTypes::MinimalMemberDetail(242, 66, 248, 89))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(8, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(92, 134, 207, 218, 252, 230, 84, 67, 234, 253, 117, 33, 200, 190))), XTypes::MinimalMemberDetail(60, 209, 95, 143))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(9, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(137, 232, 76, 116, 89, 157, 186, 5, 187, 186, 116, 229, 106, 25))), XTypes::MinimalMemberDetail(15, 202, 164, 60))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(10, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 105, 130, 244, 157, 180, 157, 207, 230, 211, 204, 157, 170, 152))), XTypes::MinimalMemberDetail(27, 42, 197, 216))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(11, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(60, 117, 248, 112, 147, 91, 68, 168, 11, 3, 20, 69, 18, 103))), XTypes::MinimalMemberDetail(13, 138, 191, 79))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(12, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(210, 79, 164, 66, 51, 227, 220, 142, 250, 164, 226, 216, 141, 105))), XTypes::MinimalMemberDetail(180, 107, 81, 123))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(13, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(235, 175, 160, 15, 211, 82, 49, 64, 142, 195, 195, 17, 53, 6))), XTypes::MinimalMemberDetail(238, 22, 117, 90))))));
}

XTypes::TypeObject minimal_to52()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(171, 115, 43, 233, 139, 29, 28, 130, 117, 249, 188, 147, 54, 250))), XTypes::MinimalMemberDetail(217, 57, 170, 247))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(2, 5, 193, 190))))));
}

XTypes::TypeObject minimal_to53()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(68, 71, 41, 218))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(139, 230, 147, 131))))));
}

XTypes::TypeObject minimal_to54()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))), XTypes::MinimalMemberDetail(160, 172, 250, 70))))));
}

XTypes::TypeObject minimal_to55()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL, XTypes::StringSTypeDefn(0))), XTypes::MinimalMemberDetail(176, 104, 147, 28))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 137, 249, 174, 25, 230, 75, 33, 116, 39, 204, 87, 125, 85))), XTypes::MinimalMemberDetail(32, 99, 193, 96))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_BOOLEAN)), XTypes::MinimalMemberDetail(143, 108, 196, 87))))));
}

XTypes::TypeObject minimal_to56()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalEnumeratedType(0, XTypes::MinimalEnumeratedHeader(XTypes::CommonEnumeratedHeader(32)), XTypes::MinimalEnumeratedLiteralSeq().append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(0, XTypes::IS_DEFAULT), XTypes::MinimalMemberDetail(107, 157, 171, 99))).append(XTypes::MinimalEnumeratedLiteral(XTypes::CommonEnumeratedLiteral(1, 0), XTypes::MinimalMemberDetail(175, 93, 205, 154))))));
}

XTypes::TypeObject minimal_to57()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_FINAL | XTypes::IS_NESTED, XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()), XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_INT32)), XTypes::MinimalMemberDetail(116, 69, 156, 163))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1, XTypes::TRY_CONSTRUCT1, XTypes::TypeIdentifier(XTypes::TK_UINT32)), XTypes::MinimalMemberDetail(226, 4, 100, 213))))));
}

XTypes::TypeMap get_minimal_type_map_private()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(1, 78, 93, 82, 90, 169, 236, 225, 40, 97, 126, 118, 81, 144))] = minimal_to0();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(9, 122, 150, 104, 250, 78, 157, 83, 255, 157, 123, 250, 229, 93))] = minimal_to1();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(10, 230, 147, 187, 255, 15, 178, 29, 139, 101, 226, 215, 223, 44))] = minimal_to2();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(19, 19, 72, 201, 237, 218, 91, 83, 143, 167, 84, 180, 58, 155))] = minimal_to3();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(29, 184, 244, 149, 52, 65, 12, 119, 163, 176, 63, 222, 239, 135))] = minimal_to4();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(31, 6, 116, 55, 219, 248, 173, 205, 16, 32, 79, 197, 188, 37))] = minimal_to5();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(47, 136, 233, 191, 112, 193, 42, 150, 67, 246, 172, 37, 197, 132))] = minimal_to6();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(50, 235, 25, 172, 15, 65, 98, 13, 167, 52, 8, 137, 206, 198))] = minimal_to7();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(55, 10, 190, 230, 50, 127, 48, 223, 212, 68, 18, 125, 171, 30))] = minimal_to8();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 105, 130, 244, 157, 180, 157, 207, 230, 211, 204, 157, 170, 152))] = minimal_to9();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 149, 192, 63, 50, 11, 43, 195, 162, 242, 193, 5, 215, 102))] = minimal_to10();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(60, 117, 248, 112, 147, 91, 68, 168, 11, 3, 20, 69, 18, 103))] = minimal_to11();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(62, 114, 125, 184, 14, 246, 184, 86, 96, 15, 47, 72, 182, 26))] = minimal_to12();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(64, 153, 42, 211, 60, 176, 197, 202, 87, 208, 76, 33, 217, 95))] = minimal_to13();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(68, 31, 169, 229, 223, 19, 38, 65, 134, 73, 192, 156, 90, 188))] = minimal_to14();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(71, 236, 37, 142, 102, 93, 176, 108, 48, 171, 95, 217, 45, 102))] = minimal_to15();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(74, 39, 56, 203, 127, 182, 9, 1, 220, 224, 1, 152, 231, 249))] = minimal_to16();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(78, 95, 171, 38, 239, 5, 228, 141, 129, 255, 216, 95, 103, 63))] = minimal_to17();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(85, 82, 253, 89, 77, 255, 166, 87, 160, 151, 85, 214, 7, 68))] = minimal_to18();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(92, 134, 207, 218, 252, 230, 84, 67, 234, 253, 117, 33, 200, 190))] = minimal_to19();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(96, 93, 209, 74, 232, 21, 94, 71, 198, 201, 237, 5, 197, 236))] = minimal_to20();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(100, 238, 166, 39, 32, 19, 40, 15, 122, 38, 196, 108, 92, 235))] = minimal_to21();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(106, 77, 176, 72, 18, 12, 173, 22, 88, 169, 114, 73, 204, 116))] = minimal_to22();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 124, 74, 82, 33, 209, 171, 154, 100, 92, 69, 182, 34, 215))] = minimal_to23();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 137, 249, 174, 25, 230, 75, 33, 116, 39, 204, 87, 125, 85))] = minimal_to24();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(120, 181, 151, 115, 213, 177, 180, 9, 132, 39, 177, 177, 17, 73))] = minimal_to25();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(124, 142, 29, 210, 235, 194, 71, 74, 224, 238, 85, 212, 254, 14))] = minimal_to26();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(125, 68, 172, 132, 224, 239, 218, 60, 192, 71, 15, 147, 30, 246))] = minimal_to27();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 56, 73, 18, 9, 183, 3, 167, 93, 113, 230, 154, 87, 113))] = minimal_to28();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(128, 6, 106, 169, 239, 151, 91, 255, 81, 243, 37, 38, 187, 17))] = minimal_to29();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(137, 232, 76, 116, 89, 157, 186, 5, 187, 186, 116, 229, 106, 25))] = minimal_to30();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(142, 169, 127, 69, 41, 166, 192, 124, 184, 9, 110, 86, 123, 211))] = minimal_to31();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(144, 121, 145, 14, 41, 12, 191, 173, 113, 126, 227, 243, 169, 231))] = minimal_to32();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(151, 133, 93, 97, 88, 230, 235, 85, 240, 208, 235, 75, 68, 253))] = minimal_to33();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(152, 77, 214, 192, 169, 112, 53, 41, 126, 186, 125, 231, 193, 225))] = minimal_to34();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(158, 69, 47, 201, 4, 49, 53, 18, 62, 98, 81, 112, 219, 57))] = minimal_to35();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(161, 246, 92, 76, 74, 229, 72, 164, 39, 201, 223, 110, 41, 253))] = minimal_to36();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(165, 173, 118, 203, 157, 101, 145, 117, 30, 199, 19, 174, 160, 45))] = minimal_to37();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(171, 115, 43, 233, 139, 29, 28, 130, 117, 249, 188, 147, 54, 250))] = minimal_to38();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(181, 89, 73, 243, 195, 120, 183, 199, 143, 190, 155, 193, 233, 148))] = minimal_to39();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(197, 166, 144, 159, 126, 194, 77, 170, 105, 72, 204, 163, 95, 225))] = minimal_to40();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(205, 99, 9, 235, 218, 120, 77, 82, 48, 128, 213, 135, 32, 100))] = minimal_to41();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(206, 148, 209, 100, 81, 125, 42, 181, 12, 217, 195, 161, 137, 0))] = minimal_to42();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(208, 131, 188, 155, 96, 118, 238, 78, 31, 220, 1, 243, 99, 160))] = minimal_to43();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(209, 232, 20, 211, 202, 90, 192, 71, 75, 28, 36, 160, 70, 23))] = minimal_to44();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(210, 79, 164, 66, 51, 227, 220, 142, 250, 164, 226, 216, 141, 105))] = minimal_to45();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(211, 251, 218, 194, 210, 196, 113, 98, 5, 103, 24, 2, 245, 75))] = minimal_to46();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(212, 19, 36, 204, 216, 207, 229, 8, 101, 152, 15, 215, 71, 23))] = minimal_to47();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(233, 193, 171, 70, 109, 161, 107, 219, 39, 127, 52, 90, 149, 159))] = minimal_to48();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(235, 175, 160, 15, 211, 82, 49, 64, 142, 195, 195, 17, 53, 6))] = minimal_to49();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(236, 248, 8, 220, 236, 201, 133, 108, 218, 21, 16, 3, 142, 168))] = minimal_to50();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(237, 11, 165, 89, 87, 253, 32, 30, 237, 205, 192, 158, 220, 92))] = minimal_to51();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(242, 50, 226, 240, 16, 38, 237, 211, 144, 26, 4, 228, 64, 49))] = minimal_to52();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(245, 123, 132, 90, 230, 57, 154, 195, 107, 24, 104, 193, 118, 23))] = minimal_to53();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(249, 220, 91, 156, 138, 84, 101, 172, 94, 24, 208, 47, 246, 97))] = minimal_to54();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(251, 95, 64, 60, 163, 23, 170, 158, 193, 148, 167, 7, 12, 36))] = minimal_to55();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(253, 72, 63, 147, 206, 16, 241, 72, 186, 231, 206, 213, 79, 158))] = minimal_to56();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(254, 60, 101, 64, 125, 160, 94, 0, 200, 47, 8, 233, 234, 252))] = minimal_to57();
  return tm;
}

}

const XTypes::TypeMap& get_minimal_type_map()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = get_minimal_type_map_private();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

